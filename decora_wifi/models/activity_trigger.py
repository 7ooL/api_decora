# Leviton Cloud Services API model ActivityTrigger.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ActivityTrigger(BaseModel):
    def __init__(self, session, model_id=None):
        super(ActivityTrigger, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities/count"
        return session.call_api(api, attribs, 'get')

    def count_activity_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_area_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_installation_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_load_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_sensor_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_shade_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_thermostat_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities"
        return session.call_api(api, attribs, 'post')

    def create_activity_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_area_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_installation_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_load_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_activity_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_area_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_installation_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_load_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_sensor_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_shade_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_thermostat_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_sensor_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_shade_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_thermostat_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def delete_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities"
        return session.call_api(api, attribs, 'delete')

    def delete_activity_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_area_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_installation_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_load_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_sensor_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_shade_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_thermostat_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_activities(cls, session, activity, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities/{0}".format(activity)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_activity_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_area_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_installation_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_load_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_sensor_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_shade_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_thermostat_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_activities(cls, session, activity, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities/{0}".format(activity)
        return session.call_api(api, attribs, 'get')

    def find_by_id_activity_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_area_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_installation_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_load_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_sensor_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_shade_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_thermostat_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities"
        return session.call_api(api, attribs, 'get')

    def get_activity_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_area(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/area"
        return session.call_api(api, attribs, 'get')

    def get_area_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_installation_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_load(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/load"
        return session.call_api(api, attribs, 'get')

    def get_load_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_schedule(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/schedule"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_sensor(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/sensor"
        return session.call_api(api, attribs, 'get')

    def get_sensor_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_shade(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/shade"
        return session.call_api(api, attribs, 'get')

    def get_shade_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_thermostat(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/thermostat"
        return session.call_api(api, attribs, 'get')

    def get_thermostat_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_activities(cls, session, activity, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/:id/activities/{0}".format(activity)
        return session.call_api(api, attribs, 'put')

    def update_by_id_activity_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_area_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_installation_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_load_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_sensor_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_shade_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_thermostat_activity_triggers(self, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/activityTriggers/{1}".format(self._id, activity_trigger)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

