# Leviton Cloud Services API model ResidentialRoom.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialRoom(BaseModel):
    def __init__(self, session, model_id=None):
        super(ResidentialRoom, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches/count"
        return session.call_api(api, attribs, 'get')

    def count_residence_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_scenes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residence_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residence_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_scenes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches"
        return session.call_api(api, attribs, 'delete')

    def delete_residence_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_scenes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_iot_switches(cls, session, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches/{0}".format(iot_switch)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_residence_residential_rooms(self, residential_room, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/{1}".format(self._id, residential_room)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_areas(cls, session, residential_area, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/{0}".format(residential_area)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_scenes(cls, session, residential_scene, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes/{0}".format(residential_scene)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def exists_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/rel/{0}"
        return session.call_api(api, attribs, 'head')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_iot_switches(cls, session, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches/{0}".format(iot_switch)
        return session.call_api(api, attribs, 'get')

    def find_by_id_residence_residential_rooms(self, residential_room, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/{1}".format(self._id, residential_room)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_areas(cls, session, residential_area, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/{0}".format(residential_area)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_scenes(cls, session, residential_scene, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes/{0}".format(residential_scene)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    def get_iot_switch_residential_room(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/residentialRoom".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_residence(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residence"
        return session.call_api(api, attribs, 'get')

    def get_residence_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas"
        return session.call_api(api, attribs, 'get')

    def get_residential_scene_residential_room(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialRoom".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_scenes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def link_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/rel/{0}"
        return session.call_api(api, attribs, 'put')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def turn_off(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/turnOff".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def turn_on(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/turnOn".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def unlink_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/rel/{0}"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_iot_switches(cls, session, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/iotSwitches/{0}".format(iot_switch)
        return session.call_api(api, attribs, 'put')

    def update_by_id_residence_residential_rooms(self, residential_room, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/{1}".format(self._id, residential_room)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_areas(cls, session, residential_area, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialAreas/{0}".format(residential_area)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_scenes(cls, session, residential_scene, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/:id/residentialScenes/{0}".format(residential_scene)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

