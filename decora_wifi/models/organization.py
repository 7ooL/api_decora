# Leviton Cloud Services API model Organization.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Organization(BaseModel):
    def __init__(self, session, model_id=None):
        super(Organization, self).__init__(session, model_id)

    def add_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/addPerson".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def cancel_subscription(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/cancelSubscription".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_app_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_app_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_app_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules"
        return session.call_api(api, attribs, 'post')

    def delete_app_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules"
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_app_organizations(self, organization, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/{1}".format(self._id, organization)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_holidays(cls, session, holiday, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays/{0}".format(holiday)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_locations(cls, session, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations/{0}".format(location)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_people(cls, session, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/{0}".format(person)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_schedules(cls, session, schedule, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules/{0}".format(schedule)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def exists_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/rel/{0}"
        return session.call_api(api, attribs, 'head')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_app_organizations(self, organization, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/{1}".format(self._id, organization)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_holidays(cls, session, holiday, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays/{0}".format(holiday)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_locations(cls, session, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations/{0}".format(location)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_people(cls, session, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/{0}".format(person)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_schedules(cls, session, schedule, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules/{0}".format(schedule)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def generate_subscription_report(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/generateSubscriptionReport".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    def get_app_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_feed_item_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/organization".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays"
        return session.call_api(api, attribs, 'get')

    def get_invitation_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/organization".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations"
        return session.call_api(api, attribs, 'get')

    def get_location_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/organization".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations"
        return session.call_api(api, attribs, 'get')

    def get_management_tier_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/organization".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people"
        return session.call_api(api, attribs, 'get')

    def get_permission_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/organization".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_subscription_plan(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/subscriptionPlan"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def link_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/rel/{0}"
        return session.call_api(api, attribs, 'put')

    def remove_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/removePerson".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def subscribe_to_plan(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/subscribeToPlan".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def unlink_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/rel/{0}"
        return session.call_api(api, attribs, 'delete')

    def update_all(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/update".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_app_organizations(self, organization, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/{1}".format(self._id, organization)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_holidays(cls, session, holiday, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/holidays/{0}".format(holiday)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_locations(cls, session, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/locations/{0}".format(location)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_people(cls, session, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/people/{0}".format(person)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_schedules(cls, session, schedule, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/:id/schedules/{0}".format(schedule)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

