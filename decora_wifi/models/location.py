# Leviton Cloud Services API model Location.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Location(BaseModel):
    def __init__(self, session, model_id=None):
        super(Location, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/feedItems/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_installations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations/count"
        return session.call_api(api, attribs, 'get')

    def count_management_tier_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_organization_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_installations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations"
        return session.call_api(api, attribs, 'post')

    def create_management_tier_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_management_tier_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_organization_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_organization_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_installations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations"
        return session.call_api(api, attribs, 'delete')

    def delete_management_tier_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_organization_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_holidays(cls, session, holiday, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays/{0}".format(holiday)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_installations(cls, session, installation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations/{0}".format(installation)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_management_tier_locations(self, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations/{1}".format(self._id, location)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_organization_locations(self, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, location)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_feed_items(cls, session, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/feedItems/{0}".format(feed_item)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_holidays(cls, session, holiday, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays/{0}".format(holiday)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_installations(cls, session, installation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations/{0}".format(installation)
        return session.call_api(api, attribs, 'get')

    def find_by_id_management_tier_locations(self, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations/{1}".format(self._id, location)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_organization_locations(self, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, location)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/feedItems"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_holidays(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays"
        return session.call_api(api, attribs, 'get')

    def get_installation_location(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/location".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_installations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations"
        return session.call_api(api, attribs, 'get')

    def get_invitation_location(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/location".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tier(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/managementTier"
        return session.call_api(api, attribs, 'get')

    def get_management_tier_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_organization(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/organization"
        return session.call_api(api, attribs, 'get')

    def get_organization_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def installers_near(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installersNear".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_holidays(cls, session, holiday, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/holidays/{0}".format(holiday)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_installations(cls, session, installation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/:id/installations/{0}".format(installation)
        return session.call_api(api, attribs, 'put')

    def update_by_id_management_tier_locations(self, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/locations/{1}".format(self._id, location)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_organization_locations(self, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, location)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

