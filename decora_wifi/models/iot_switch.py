# Leviton Cloud Services API model IotSwitch.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class IotSwitch(BaseModel):
    def __init__(self, session, model_id=None):
        super(IotSwitch, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residence_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residential_room_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residence_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residential_room_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residence_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residential_room_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residence_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residential_room_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residence_iot_switches(self, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/{1}".format(self._id, iot_switch)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_room_iot_switches(self, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/{1}".format(self._id, iot_switch)
        return self._session.call_api(api, attribs, 'delete')

    def discover(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/discover".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residence_iot_switches(self, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/{1}".format(self._id, iot_switch)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residential_room_iot_switches(self, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/{1}".format(self._id, iot_switch)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residence(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/:id/residence"
        return session.call_api(api, attribs, 'get')

    def get_residence_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_room(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/:id/residentialRoom"
        return session.call_api(api, attribs, 'get')

    def get_residential_room_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def identify(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/identify".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_residence_iot_switches(self, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/{1}".format(self._id, iot_switch)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_residential_room_iot_switches(self, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/iotSwitches/{1}".format(self._id, iot_switch)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

