# Leviton Cloud Services API model ResidentialAction.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialAction(BaseModel):
    def __init__(self, session, model_id=None):
        super(ResidentialAction, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residential_activity_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residential_scene_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residential_schedule_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residential_activity_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residential_scene_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residential_schedule_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residential_activity_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residential_scene_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residential_schedule_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residential_activity_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residential_scene_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residential_schedule_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_activity_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_scene_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_schedule_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'delete')

    def execute(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/execute".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residential_activity_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residential_scene_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residential_schedule_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_activity(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/:id/residentialActivity"
        return session.call_api(api, attribs, 'get')

    def get_residential_activity_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_scene(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/:id/residentialScene"
        return session.call_api(api, attribs, 'get')

    def get_residential_scene_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_schedule(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/:id/residentialSchedule"
        return session.call_api(api, attribs, 'get')

    def get_residential_schedule_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_residential_activity_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_residential_scene_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_residential_schedule_residential_actions(self, residential_action, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residentialActions/{1}".format(self._id, residential_action)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

