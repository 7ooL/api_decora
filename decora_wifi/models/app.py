# Leviton Cloud Services API model App.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class App(BaseModel):
    def __init__(self, session, model_id=None):
        super(App, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_organizations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_subscription_plans(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_updates(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_organizations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_subscription_plans(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_updates(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_organizations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_subscription_plans(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_updates(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_organizations(cls, session, organization, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations/{0}".format(organization)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_preferences(cls, session, preference, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences/{0}".format(preference)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_subscription_plans(cls, session, subscription_plan, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans/{0}".format(subscription_plan)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_updates(cls, session, update, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates/{0}".format(update)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_organizations(cls, session, organization, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations/{0}".format(organization)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_preferences(cls, session, preference, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences/{0}".format(preference)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_subscription_plans(cls, session, subscription_plan, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans/{0}".format(subscription_plan)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_updates(cls, session, update, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates/{0}".format(update)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_organizations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations"
        return session.call_api(api, attribs, 'get')

    def get_preference_app(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}/app".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_subscription_plans(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_updates(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates"
        return session.call_api(api, attribs, 'get')

    def get_whitelist_app(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/app".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def update_all(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/update".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_organizations(cls, session, organization, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/organizations/{0}".format(organization)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_preferences(cls, session, preference, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/preferences/{0}".format(preference)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_subscription_plans(cls, session, subscription_plan, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/subscriptionPlans/{0}".format(subscription_plan)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_updates(cls, session, update, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/:id/updates/{0}".format(update)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

