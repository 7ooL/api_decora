# Leviton Cloud Services API model FeedItem.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class FeedItem(BaseModel):
    def __init__(self, session, model_id=None):
        super(FeedItem, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_installation_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_load_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_location_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_management_tier_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_sensor_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_shade_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_thermostat_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/feedItems/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create_management_tier_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_management_tier_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_management_tier_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_management_tier_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_installation_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_load_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_location_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_management_tier_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_sensor_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_shade_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_thermostat_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_controller(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/controller"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_installation(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/installation"
        return session.call_api(api, attribs, 'get')

    def get_installation_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_load(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/load"
        return session.call_api(api, attribs, 'get')

    def get_load_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_location_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_management_tier_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_organization(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/organization"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_person(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/person"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_sensor(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/sensor"
        return session.call_api(api, attribs, 'get')

    def get_sensor_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_shade(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/shade"
        return session.call_api(api, attribs, 'get')

    def get_shade_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_thermostat(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/:id/thermostat"
        return session.call_api(api, attribs, 'get')

    def get_thermostat_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Thermostats/{0}/feedItems".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def update_by_id_management_tier_feed_items(self, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/feedItems/{1}".format(self._id, feed_item)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

