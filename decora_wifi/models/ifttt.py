# Leviton Cloud Services API model Ifttt.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Ifttt(BaseModel):
    def __init__(self, session, model_id=None):
        super(Ifttt, self).__init__(session, model_id)

    def brighten_switch(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/brighten_switch".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def dim_switch(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/dim_switch".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    def get_activity_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/run_activity/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_all_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/all/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_dimmer_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/brighten_switch/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_dimmer_options1(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/set_brightness/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_dimmer_options2(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/dim_switch/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_room_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_room_on/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_scene_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/run_scene/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_status(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/status".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_switch_on(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/triggers/switch_on".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_switch_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/triggers/switch_on/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_switch_options1(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_switch/fields/name/options".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def get_user_info(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/user/info".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def run_activity(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/run_activity".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def run_scene(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/run_scene".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def set_brightness(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/set_brightness".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def setup(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/test/setup".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def toggle_room(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_room_on".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def toggle_room1(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_room_off".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def toggle_switch(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_switch".format(self._id)
        return self._session.call_api(api, attribs, 'post')

