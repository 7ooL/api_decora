# Leviton Cloud Services API model Invitation.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Invitation(BaseModel):
    def __init__(self, session, model_id=None):
        super(Invitation, self).__init__(session, model_id)

    def accept(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/accept".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def count_organization_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions/count"
        return session.call_api(api, attribs, 'get')

    def count_person_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residence_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_organization_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_person_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residence_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_organization_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions"
        return session.call_api(api, attribs, 'post')

    def create_person_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residence_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_organization_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions"
        return session.call_api(api, attribs, 'delete')

    def delete_person_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residence_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_organization_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_person_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_residence_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'delete')

    def find_by_id_organization_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'get')

    def find_by_id_person_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residence_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_location(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/location"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tier(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/managementTier"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_organization(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/organization"
        return session.call_api(api, attribs, 'get')

    def get_organization_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_permission_invitation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/invitation".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_person(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/person"
        return session.call_api(api, attribs, 'get')

    def get_person_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residence(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/residence"
        return session.call_api(api, attribs, 'get')

    def get_residence_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_residential_permission_invitation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/invitation".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def update_by_id_organization_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'put')

    def update_by_id_person_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_residence_invitations(self, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/{1}".format(self._id, invitation)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

