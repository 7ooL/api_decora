# Leviton Cloud Services API model ShadeDefinition.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ShadeDefinition(BaseModel):
    def __init__(self, session, model_id=None):
        super(ShadeDefinition, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_whitelist_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_whitelist_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_whitelist_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_whitelist_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_whitelist_shade_definitions(self, shade_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/{1}".format(self._id, shade_definition)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_whitelist_shade_definitions(self, shade_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/{1}".format(self._id, shade_definition)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    def get_shade_device_definition(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/deviceDefinition".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_whitelist(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/:id/whitelist"
        return session.call_api(api, attribs, 'get')

    def get_whitelist_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_whitelist_shade_definitions(self, shade_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/{1}".format(self._id, shade_definition)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

