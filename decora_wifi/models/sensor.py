# Leviton Cloud Services API model Sensor.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Sensor(BaseModel):
    def __init__(self, session, model_id=None):
        super(Sensor, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_activity_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers/count"
        return session.call_api(api, attribs, 'get')

    def count_area_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/feedItems/count"
        return session.call_api(api, attribs, 'get')

    def count_installation_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_sensor_snapshots(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_activity_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers"
        return session.call_api(api, attribs, 'post')

    def create_area_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_installation_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_area_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_installation_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_sensor_snapshots(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def delete_activity_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers"
        return session.call_api(api, attribs, 'delete')

    def delete_area_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_installation_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_sensor_snapshots(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_activity_triggers(cls, session, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers/{0}".format(activity_trigger)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_area_sensors(self, sensor, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors/{1}".format(self._id, sensor)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_installation_sensors(self, sensor, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/{1}".format(self._id, sensor)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_sensor_snapshots(cls, session, sensor_snapshot, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots/{0}".format(sensor_snapshot)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_activity_triggers(cls, session, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers/{0}".format(activity_trigger)
        return session.call_api(api, attribs, 'get')

    def find_by_id_area_sensors(self, sensor, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors/{1}".format(self._id, sensor)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_feed_items(cls, session, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/feedItems/{0}".format(feed_item)
        return session.call_api(api, attribs, 'get')

    def find_by_id_installation_sensors(self, sensor, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/{1}".format(self._id, sensor)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_sensor_snapshots(cls, session, sensor_snapshot, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots/{0}".format(sensor_snapshot)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    def get_activity_trigger_sensor(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActivityTriggers/{0}/sensor".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_activity_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_area(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/area"
        return session.call_api(api, attribs, 'get')

    def get_area_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_device_definition(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/deviceDefinition"
        return session.call_api(api, attribs, 'get')

    def get_feed_item_sensor(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/sensor".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/feedItems"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_installation(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/installation"
        return session.call_api(api, attribs, 'get')

    def get_installation_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_sensor_snapshot_sensor(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/SensorSnapshots/{0}/sensor".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_sensor_snapshots(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots"
        return session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_activity_triggers(cls, session, activity_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/activityTriggers/{0}".format(activity_trigger)
        return session.call_api(api, attribs, 'put')

    def update_by_id_area_sensors(self, sensor, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Areas/{0}/sensors/{1}".format(self._id, sensor)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_installation_sensors(self, sensor, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/{1}".format(self._id, sensor)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_sensor_snapshots(cls, session, sensor_snapshot, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/:id/sensorSnapshots/{0}".format(sensor_snapshot)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

