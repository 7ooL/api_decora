# Leviton Cloud Services API model Residence.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Residence(BaseModel):
    def __init__(self, session, model_id=None):
        super(Residence, self).__init__(session, model_id)

    def add_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/addPerson".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_omni_notifiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers/count"
        return session.call_api(api, attribs, 'get')

    def count_residential_account_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_breaker_panels(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_rooms(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residential_account_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_omni_notifiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers"
        return session.call_api(api, attribs, 'post')

    def create_residential_account_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_breaker_panels(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_rooms(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_omni_notifiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers"
        return session.call_api(api, attribs, 'delete')

    def delete_residential_account_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_breaker_panels(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_rooms(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_iot_switches(cls, session, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches/{0}".format(iot_switch)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_omni_notifiers(cls, session, omni_notifier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers/{0}".format(omni_notifier)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_residential_account_residences(self, residence, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/{1}".format(self._id, residence)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_activities(cls, session, residential_activity, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities/{0}".format(residential_activity)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_areas(cls, session, residential_area, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas/{0}".format(residential_area)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_breaker_panels(cls, session, residential_breaker_panel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels/{0}".format(residential_breaker_panel)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_rooms(cls, session, residential_room, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms/{0}".format(residential_room)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_schedules(cls, session, residential_schedule, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules/{0}".format(residential_schedule)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_iot_switches(cls, session, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches/{0}".format(iot_switch)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_omni_notifiers(cls, session, omni_notifier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers/{0}".format(omni_notifier)
        return session.call_api(api, attribs, 'get')

    def find_by_id_residential_account_residences(self, residence, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/{1}".format(self._id, residence)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_activities(cls, session, residential_activity, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities/{0}".format(residential_activity)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_areas(cls, session, residential_area, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas/{0}".format(residential_area)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_breaker_panels(cls, session, residential_breaker_panel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels/{0}".format(residential_breaker_panel)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_rooms(cls, session, residential_room, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms/{0}".format(residential_room)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_schedules(cls, session, residential_schedule, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules/{0}".format(residential_schedule)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    def get_invitation_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations"
        return session.call_api(api, attribs, 'get')

    def get_iot_switch_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_iot_switches(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches"
        return session.call_api(api, attribs, 'get')

    def get_omni_notifier_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OmniNotifiers/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_omni_notifiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_account(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAccount"
        return session.call_api(api, attribs, 'get')

    def get_residential_account_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_activities(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities"
        return session.call_api(api, attribs, 'get')

    def get_residential_activity_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActivities/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_residential_area_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAreas/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_areas(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas"
        return session.call_api(api, attribs, 'get')

    def get_residential_breaker_panel_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_breaker_panels(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels"
        return session.call_api(api, attribs, 'get')

    def get_residential_permission_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_residential_room_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialRooms/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_rooms(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms"
        return session.call_api(api, attribs, 'get')

    def get_residential_schedule_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialSchedules/{0}/residence".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_schedules(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules"
        return session.call_api(api, attribs, 'get')

    def list_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/listPermissions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def register_device(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/registerDevice".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def register_residential_breaker_panel(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/registerResidentialBreakerPanel".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def remove_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/removePerson".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_iot_switches(cls, session, iot_switch, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/iotSwitches/{0}".format(iot_switch)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_omni_notifiers(cls, session, omni_notifier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/omniNotifiers/{0}".format(omni_notifier)
        return session.call_api(api, attribs, 'put')

    def update_by_id_residential_account_residences(self, residence, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/{1}".format(self._id, residence)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_activities(cls, session, residential_activity, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialActivities/{0}".format(residential_activity)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_areas(cls, session, residential_area, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialAreas/{0}".format(residential_area)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_breaker_panels(cls, session, residential_breaker_panel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialBreakerPanels/{0}".format(residential_breaker_panel)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_rooms(cls, session, residential_room, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialRooms/{0}".format(residential_room)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_schedules(cls, session, residential_schedule, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/:id/residentialSchedules/{0}".format(residential_schedule)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

