# Leviton Cloud Services API model OauthToken.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class OauthToken(BaseModel):
    def __init__(self, session, model_id=None):
        super(OauthToken, self).__init__(session, model_id)

    def control_device(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/controlDevice".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def count_api_partner_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_api_partner_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_api_partner_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_api_partner_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_api_partner_oauth_tokens(self, oauth_token, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/{1}".format(self._id, oauth_token)
        return self._session.call_api(api, attribs, 'delete')

    def discover_devices(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/discoverDevices".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_api_partner_oauth_tokens(self, oauth_token, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/{1}".format(self._id, oauth_token)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_api_partner(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/:id/apiPartner"
        return session.call_api(api, attribs, 'get')

    def get_api_partner_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def poll_device(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/pollDevice".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def subscribe_to_notifications(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/subscribeToNotifications".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_api_partner_oauth_tokens(self, oauth_token, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/{1}".format(self._id, oauth_token)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens".format(self._id)
        return self._session.call_api(api, attribs, 'put')

