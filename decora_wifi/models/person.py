# Leviton Cloud Services API model Person.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Person(BaseModel):
    def __init__(self, session, model_id=None):
        super(Person, self).__init__(session, model_id)

    def apply_password(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/applyPassword".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def confirm(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/confirm".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations/count"
        return session.call_api(api, attribs, 'get')

    def count_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_notification_subscriptions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_notification_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers/count"
        return session.call_api(api, attribs, 'get')

    def count_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/permissions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_role_mappings(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_user_feedbacks(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations"
        return session.call_api(api, attribs, 'post')

    def create_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_notification_subscriptions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_notification_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers"
        return session.call_api(api, attribs, 'post')

    def create_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_role_mappings(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_user_feedbacks(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def delete_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens"
        return session.call_api(api, attribs, 'delete')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations"
        return session.call_api(api, attribs, 'delete')

    def delete_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_notification_subscriptions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_notification_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers"
        return session.call_api(api, attribs, 'delete')

    def delete_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/permissions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_role_mappings(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_user_feedbacks(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_access_tokens(cls, session, access_token, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens/{0}".format(access_token)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_management_tier_people(self, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/{1}".format(self._id, person)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_notification_subscriptions(cls, session, notification_subscription, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions/{0}".format(notification_subscription)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_notification_triggers(cls, session, notification_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers/{0}".format(notification_trigger)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_organization_people(self, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, person)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_preferences(cls, session, preference, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences/{0}".format(preference)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_permissions(cls, session, residential_permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions/{0}".format(residential_permission)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_role_mappings(cls, session, role_mapping, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings/{0}".format(role_mapping)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_user_feedbacks(cls, session, user_feedback, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks/{0}".format(user_feedback)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'head')

    @classmethod
    def exists_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/rel/{0}"
        return session.call_api(api, attribs, 'head')

    def exists_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'head')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_access_tokens(cls, session, access_token, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens/{0}".format(access_token)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'get')

    def find_by_id_management_tier_people(self, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/{1}".format(self._id, person)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_notification_subscriptions(cls, session, notification_subscription, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions/{0}".format(notification_subscription)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_notification_triggers(cls, session, notification_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers/{0}".format(notification_trigger)
        return session.call_api(api, attribs, 'get')

    def find_by_id_organization_people(self, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, person)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_preferences(cls, session, preference, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences/{0}".format(preference)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_permissions(cls, session, residential_permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions/{0}".format(residential_permission)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_role_mappings(cls, session, role_mapping, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings/{0}".format(role_mapping)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_user_feedbacks(cls, session, user_feedback, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks/{0}".format(user_feedback)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens"
        return session.call_api(api, attribs, 'get')

    def get_current(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_feed_item_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_invitation_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_invitations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations"
        return session.call_api(api, attribs, 'get')

    def get_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_notification_subscriptions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_notification_triggers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers"
        return session.call_api(api, attribs, 'get')

    def get_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_permission_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/permissions"
        return session.call_api(api, attribs, 'get')

    def get_preference_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}/person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_preferences(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences"
        return session.call_api(api, attribs, 'get')

    def get_residential_permission_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_role_mappings(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings"
        return session.call_api(api, attribs, 'get')

    def get_user_feedback_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/UserFeedbacks/{0}/person".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_user_feedbacks(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks"
        return session.call_api(api, attribs, 'get')

    def link_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def link_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/rel/{0}"
        return session.call_api(api, attribs, 'put')

    def link_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'put')

    def login(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/login".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def logout(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/logout".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def notify(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notify".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def reset_password(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/reset".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def unlink_management_tier_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def unlink_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/rel/{0}"
        return session.call_api(api, attribs, 'delete')

    def unlink_organization_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_access_tokens(cls, session, access_token, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/accessTokens/{0}".format(access_token)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_invitations(cls, session, invitation, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/invitations/{0}".format(invitation)
        return session.call_api(api, attribs, 'put')

    def update_by_id_management_tier_people(self, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/people/{1}".format(self._id, person)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_notification_subscriptions(cls, session, notification_subscription, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationSubscriptions/{0}".format(notification_subscription)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_notification_triggers(cls, session, notification_trigger, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/notificationTriggers/{0}".format(notification_trigger)
        return session.call_api(api, attribs, 'put')

    def update_by_id_organization_people(self, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, person)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_preferences(cls, session, preference, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/preferences/{0}".format(preference)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_permissions(cls, session, residential_permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/residentialPermissions/{0}".format(residential_permission)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_role_mappings(cls, session, role_mapping, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/roleMappings/{0}".format(role_mapping)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_user_feedbacks(cls, session, user_feedback, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/:id/userFeedbacks/{0}".format(user_feedback)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def verify_email(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/verifyEmail".format(self._id)
        return self._session.call_api(api, attribs, 'post')

