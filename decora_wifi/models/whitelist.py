# Leviton Cloud Services API model Whitelist.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Whitelist(BaseModel):
    def __init__(self, session, model_id=None):
        super(Whitelist, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_load_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_sensor_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_shade_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_thermostat_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_touchscreen_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_load_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_sensor_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_shade_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_thermostat_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_touchscreen_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_load_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_sensor_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_shade_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_thermostat_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_touchscreen_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_load_definitions(cls, session, load_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions/{0}".format(load_definition)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_sensor_definitions(cls, session, sensor_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions/{0}".format(sensor_definition)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_shade_definitions(cls, session, shade_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions/{0}".format(shade_definition)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_thermostat_definitions(cls, session, thermostat_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions/{0}".format(thermostat_definition)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_touchscreen_definitions(cls, session, touchscreen_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions/{0}".format(touchscreen_definition)
        return session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_load_definitions(cls, session, load_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions/{0}".format(load_definition)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_sensor_definitions(cls, session, sensor_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions/{0}".format(sensor_definition)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_shade_definitions(cls, session, shade_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions/{0}".format(shade_definition)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_thermostat_definitions(cls, session, thermostat_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions/{0}".format(thermostat_definition)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_touchscreen_definitions(cls, session, touchscreen_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions/{0}".format(touchscreen_definition)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_app(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/app"
        return session.call_api(api, attribs, 'get')

    def get_load_definition_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_load_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions"
        return session.call_api(api, attribs, 'get')

    def get_sensor_definition_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/SensorDefinitions/{0}/whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_sensor_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions"
        return session.call_api(api, attribs, 'get')

    def get_shade_definition_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}/whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_shade_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions"
        return session.call_api(api, attribs, 'get')

    def get_thermostat_definition_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ThermostatDefinitions/{0}/whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_thermostat_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions"
        return session.call_api(api, attribs, 'get')

    def get_touchscreen_definition_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/TouchscreenDefinitions/{0}/whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_touchscreen_definitions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions"
        return session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_load_definitions(cls, session, load_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/loadDefinitions/{0}".format(load_definition)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_sensor_definitions(cls, session, sensor_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/sensorDefinitions/{0}".format(sensor_definition)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_shade_definitions(cls, session, shade_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/shadeDefinitions/{0}".format(shade_definition)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_thermostat_definitions(cls, session, thermostat_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/thermostatDefinitions/{0}".format(thermostat_definition)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_touchscreen_definitions(cls, session, touchscreen_definition, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/:id/touchscreenDefinitions/{0}".format(touchscreen_definition)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

