# Leviton Cloud Services API model AlexaToken.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class AlexaToken(BaseModel):
    def __init__(self, session, model_id=None):
        super(AlexaToken, self).__init__(session, model_id)

    def control_device(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/controlDevice".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def discover_devices(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/discoverDevices".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens/:id"
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/AlexaTokens".format(self._id)
        return self._session.call_api(api, attribs, 'put')

