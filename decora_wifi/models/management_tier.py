# Leviton Cloud Services API model ManagementTier.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ManagementTier(BaseModel):
    def __init__(self, session, model_id=None):
        super(ManagementTier, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations/count"
        return session.call_api(api, attribs, 'get')

    def count_management_tier_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers/count"
        return session.call_api(api, attribs, 'get')

    def count_organization_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def count_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions/count"
        return session.call_api(api, attribs, 'get')

    def count_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations"
        return session.call_api(api, attribs, 'post')

    def create_management_tier_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_management_tier_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_organization_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_organization_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions"
        return session.call_api(api, attribs, 'post')

    def create_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations"
        return session.call_api(api, attribs, 'delete')

    def delete_management_tier_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers"
        return session.call_api(api, attribs, 'delete')

    def delete_organization_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions"
        return session.call_api(api, attribs, 'delete')

    def delete_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_feed_items(cls, session, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems/{0}".format(feed_item)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_locations(cls, session, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations/{0}".format(location)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_management_tier_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_organization_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_people(cls, session, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/{0}".format(person)
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_person_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def exists_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/rel/{0}"
        return session.call_api(api, attribs, 'head')

    def exists_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'head')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_feed_items(cls, session, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems/{0}".format(feed_item)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_locations(cls, session, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations/{0}".format(location)
        return session.call_api(api, attribs, 'get')

    def find_by_id_management_tier_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'get')

    def find_by_id_organization_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_people(cls, session, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/{0}".format(person)
        return session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'get')

    def find_by_id_person_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_feed_items(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems"
        return session.call_api(api, attribs, 'get')

    def get_invitation_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/managementTier".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_location_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/managementTier".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_locations(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tier(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTier"
        return session.call_api(api, attribs, 'get')

    def get_management_tier_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTier".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_management_tier_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tiers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_organization(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/organization"
        return session.call_api(api, attribs, 'get')

    def get_organization_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people"
        return session.call_api(api, attribs, 'get')

    def get_permission_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/managementTier".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_permissions(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions"
        return session.call_api(api, attribs, 'get')

    def get_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def link_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/rel/{0}"
        return session.call_api(api, attribs, 'put')

    def link_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'put')

    def move_to_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/moveToTier".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def store_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/storeLocations".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def unlink_people(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/rel/{0}"
        return session.call_api(api, attribs, 'delete')

    def unlink_person_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/rel/{1}".format(self._id, None)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_feed_items(cls, session, feed_item, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/feedItems/{0}".format(feed_item)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_locations(cls, session, location, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/locations/{0}".format(location)
        return session.call_api(api, attribs, 'put')

    def update_by_id_management_tier_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_management_tiers(cls, session, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/managementTiers/{0}".format(management_tier)
        return session.call_api(api, attribs, 'put')

    def update_by_id_organization_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_people(cls, session, person, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/people/{0}".format(person)
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_permissions(cls, session, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/:id/permissions/{0}".format(permission)
        return session.call_api(api, attribs, 'put')

    def update_by_id_person_management_tiers(self, management_tier, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/{1}".format(self._id, management_tier)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

