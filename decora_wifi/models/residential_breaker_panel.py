# Leviton Cloud Services API model ResidentialBreakerPanel.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialBreakerPanel(BaseModel):
    def __init__(self, session, model_id=None):
        super(ResidentialBreakerPanel, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_residence_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def count_residential_breakers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers/count"
        return session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/accessTokens"
        return session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_residence_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_residence_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def create_residential_breakers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_residence_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def delete_residential_breakers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers"
        return session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/accessTokens"
        return session.call_api(api, attribs, 'delete')

    def destroy_by_id_residence_residential_breaker_panels(self, residential_breaker_panel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panel)
        return self._session.call_api(api, attribs, 'delete')

    @classmethod
    def destroy_by_id_residential_breakers(cls, session, residential_breaker, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers/{0}".format(residential_breaker)
        return session.call_api(api, attribs, 'delete')

    def discover(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/discover".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_residence_residential_breaker_panels(self, residential_breaker_panel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panel)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find_by_id_residential_breakers(cls, session, residential_breaker, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers/{0}".format(residential_breaker)
        return session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/accessTokens"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def get_residence(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residence"
        return session.call_api(api, attribs, 'get')

    def get_residence_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get_residential_breaker_residential_breaker_panel(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}/residentialBreakerPanel".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_residential_breakers(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers"
        return session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_access_tokens(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/accessTokens"
        return session.call_api(api, attribs, 'put')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_residence_residential_breaker_panels(self, residential_breaker_panel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panel)
        return self._session.call_api(api, attribs, 'put')

    @classmethod
    def update_by_id_residential_breakers(cls, session, residential_breaker, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/:id/residentialBreakers/{0}".format(residential_breaker)
        return session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

