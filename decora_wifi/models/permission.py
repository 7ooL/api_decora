# Leviton Cloud Services API model Permission.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Permission(BaseModel):
    def __init__(self, session, model_id=None):
        super(Permission, self).__init__(session, model_id)

    def count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_invitation_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_management_tier_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_organization_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def count_person_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/count".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_invitation_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_management_tier_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_invitation_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_management_tier_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_many_organization_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def create_organization_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_invitation_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_management_tier_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_organization_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def delete_person_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_invitation_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_management_tier_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_organization_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'delete')

    def destroy_by_id_person_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_invitation_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_management_tier_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_organization_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'get')

    def find_by_id_person_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'get')

    def find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/findOne".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.set_model_data(data)
        return self

        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_invitation(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/:id/invitation"
        return session.call_api(api, attribs, 'get')

    def get_invitation_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_management_tier(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/:id/managementTier"
        return session.call_api(api, attribs, 'get')

    def get_management_tier_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_organization(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/:id/organization"
        return session.call_api(api, attribs, 'get')

    def get_organization_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def get_person(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/:id/person"
        return session.call_api(api, attribs, 'get')

    def get_person_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/replaceOrCreate".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def update_attributes(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/:id"
        return session.call_api(api, attribs, 'put')

    def update_by_id_invitation_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_management_tier_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ManagementTiers/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_organization_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'put')

    def update_by_id_person_permissions(self, permission, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permission)
        return self._session.call_api(api, attribs, 'put')

    def upsert(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions".format(self._id)
        return self._session.call_api(api, attribs, 'put')

    def upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/upsertWithWhere".format(self._id)
        return self._session.call_api(api, attribs, 'post')

