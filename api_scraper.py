#!/usr/bin/python

import sys
import re
import inflect

REST_MAP = {'GET': 'get', 'PUT': 'update', 'POST': 'create', 'DELETE': 'delete'}


p = inflect.engine()


def underscorize(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


def write_model_file(model):
    name = model['name']
    filename = underscorize(name)
    file = open("./decora_wifi/models/{0}.py".format(filename), 'w')
    file.write("# Leviton Cloud Services API model {0}.\n".format(name))
    file.write('# Auto-generated by api_scraper.py.\n')
    file.write('#\n')
    file.write('# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>\n')
    file.write('#\n')
    file.write('# This code is released under the terms of the MIT license. ')
    file.write('See the LICENSE\n')
    file.write('# file for more details.\n')
    file.write('from decora_wifi.base_model import BaseModel\n')
    file.write('\n\n')
    file.write("class {0}(BaseModel):\n".format(name))
    file.write('    def __init__(self, session, model_id=None):\n')
    file.write("        super({0}, self).__init__(session, model_id)\n\n".format(name))

    for method in sorted(model['methods'].keys()):
        write_method(file, model, model['methods'][method])

    file.close()


def write_method(file, model, method):
    # REST APIs, so slash delimited
    # print(method)
    api_split = method['url'].split('/')
    # The method name should match the API.
    # 1. Is it just a model method?
    # 2. Is it a nested list method?
    # 3. Is it a nested foreign key method?

    fk_index = api_split.index(':fk') if ':fk' in api_split else None
    if fk_index is not None:
        fk_name = underscorize(api_split[fk_index - 1])
        fk_name_singular = p.singular_noun(fk_name) or None
        # print(fk_name + ', ' + str(fk_name_singular))
    else:
        fk_name = None
        fk_name_singular = None

    if not method['type'] == 'class':
        api = method['url'].replace(':id', '{0}').replace(':fk', '{1}')
    else:
        api = method['url'].replace(':fk', '{0}')

    fk_line = (', ' + fk_name_singular) if fk_name_singular is not None else ''

    if method['type'] == 'class':
        decl = "    def {0}(cls, session{1}, attribs=None):\n".format(method['name'], fk_line)
        file.write("    @classmethod\n")
        file.write(decl)
        file.write('        if attribs is None:\n')
        file.write('            attribs = {}\n')

        if fk_name_singular is not None:
            format_line = ".format({0})".format(fk_name_singular)
        else:
            format_line = ''
        file.write("        api = \"{0}\"{1}\n".format(api, format_line))
        code = "session.call_api(api, attribs, \'{0}\')\n\n"
    else:
        decl = "    def {0}(self{1}, attribs=None):\n".format(method['name'], fk_line)
        file.write(decl)
        file.write('        if attribs is None:\n')
        file.write('            attribs = {}\n')

        if fk_name is not None:
            format_line = ".format(self._id, {0})".format(fk_name_singular)
        else:
            format_line = '.format(self._id)'
        file.write("        api = \"{0}\"{1}\n".format(api, format_line))
        code = "self._session.call_api(api, attribs, \'{0}\')\n\n"

    if method['name'] == 'get':
        file.write('        data = ' + code.format(method['method'].lower()))
        if method['type'] == 'class':
            file.write("        model = {0}()\n".format(model['name']))
            file.write("        model.set_model_data(data)\n")
            file.write("        return model\n\n")
        else:
            file.write('        self.set_model_data(data)\n')
            file.write('        return self\n\n')
    if method['name'] == 'update':
        file.write('        data = ' + code.format(method['method'].lower()))
        if method['type'] == 'class':
            file.write("        model = {0}()\n".format(model['name']))
            file.write("        model.set_model_data(data)\n")
            file.write("        return model\n\n")
        else:
            file.write('        self.update_model_data(attribs)\n')
            file.write('        return self\n\n')
    else:
        file.write('        return ' + code.format(method['method'].lower()))


# valid states = no-model, model, api
state = 'no-model'
RE_MODEL_DECL = re.compile("module\.factory\(\"(.*?)\"")
RE_MODEL_LBR = re.compile("LoopBackResource\(urlBase\s\+\s\"(.*?)\"")
RE_MODEL_END = re.compile("\s*\}\);")
RE_CLASS_API_DECL = re.compile("prototype\$_?_?(.*?):\s*{")
RE_MODEL_API_DECL = re.compile("\s*(.*?):\s*{")
RE_SUBMODEL_API_DECL = re.compile("\"::(.*?)\":\s*{")
RE_API_END = re.compile("^\s{16}\},?")
RE_API_URL = re.compile("urlBase\s*\+\s*\"(.*?)\"")
RE_API_METHOD = re.compile("method:\s*\"(.*?)\"")
RE_END = re.compile("module\.factory\(\"LoopBackAuth\"")

extracted_models = {}
model = None
method = None

for i, line in enumerate(open(sys.argv[1])):
    if state == 'no-model':
        match = re.search(RE_END, line)

        if match is not None:
            break

        match = re.search(RE_MODEL_DECL, line)
        if match is None:
            continue

        model = {'name': match.group(1), 'methods': {}}
        extracted_models[model['name']] = model
        state = 'model'
    elif state == 'model':
        match = re.search(RE_MODEL_END, line)

        if match is not None:
            state = 'no-model'
            print('no model')
            continue

        match = re.search(RE_MODEL_LBR, line)

        if match is not None:
            method = {'name': 'get', 'type': 'get',
                      'url': match.group(1), 'method': 'get'}
            model['methods'][method['name']] = method
            continue

        match = re.search(RE_CLASS_API_DECL, line)

        if match is not None:
            method = {'name': match.group(1), 'type': 'class'}
            method['name'] = underscorize(method['name']).replace('__', '_')
            model['methods'][method['name']] = method
            state = 'api'
            continue

        match = re.search(RE_SUBMODEL_API_DECL, line)

        if match is not None:
            method = {'name': match.group(1), 'type': 'subinstance'}
            method['name'] = underscorize(method['name'].replace('::', '_')).replace('__', '_')
            model['methods'][method['name']] = method
            state = 'api'
            continue

        match = re.search(RE_MODEL_API_DECL, line)

        if match is not None:
            method = {'name': match.group(1), 'type': 'instance'}
            method['name'] = underscorize(method['name'])
            model['methods'][method['name']] = method
            state = 'api'
            continue
    elif state == 'api':
        match = re.search(RE_API_END, line)

        if match is not None:
            state = 'model'
            continue

        match = re.search(RE_API_URL, line)

        if match is not None:
            method['url'] = match.group(1)
            continue

        match = re.search(RE_API_METHOD, line)

        if match is not None:
            method['method'] = match.group(1)
            continue

for model in sorted(extracted_models.keys()):
    write_model_file(extracted_models[model])